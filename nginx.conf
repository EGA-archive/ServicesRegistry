# user crg;
worker_processes auto;
pid /var/run/crg/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

http {

        ##
        # Basic Settings
        ##

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        # server_tokens off;

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # SSL Settings
        ##

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        gzip on;

        # gzip_vary on;
        # gzip_proxied any;
        # gzip_comp_level 6;
        # gzip_buffers 16 8k;
        # gzip_http_version 1.1;
        # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        ##
        # Virtual Host Configs
        ##

	upstream services_registry {
	    # fail_timeout=0 means we always retry an upstream even if it failed
	    # to return a good HTTP response

	    # Unix domain servers
	    server unix:/var/run/crg/instance_1.sock fail_timeout=0;
	    server unix:/var/run/crg/instance_2.sock fail_timeout=0;
	    server unix:/var/run/crg/instance_3.sock fail_timeout=0;
	    server unix:/var/run/crg/instance_4.sock fail_timeout=0;

    	    # Unix domain sockets are used in this example due to their high performance,
	    # but TCP/IP sockets could be used instead:
	    # server 127.0.0.1:8081 fail_timeout=0;
	    # server 127.0.0.1:8082 fail_timeout=0;
	    # server 127.0.0.1:8083 fail_timeout=0;
	    # server 127.0.0.1:8084 fail_timeout=0;
  	}

	server {
	  listen 8080 default_server;
	  listen [::]:8080 default_server;

	  server_name _;
	  client_max_body_size 4G;
  	  
  	  location /static {
	  	root /crg/static;
    		expires max;
    		add_header Pragma public;
		add_header Cache-Control "public, must-revalidate, proxy-revalidate";
	  }

  	  location /favicon.ico {
	        return 404;
		# Don't bother
	  }


          location / {
	  	proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_redirect off;
		proxy_buffering off;
		proxy_pass http://services_registry;
	  }

     }
}
